--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.26 (https://github.com/red-blox/zap)

if not _G.__ZAP then
	_G.__ZAP = { ["ZAP"] = {} }
elseif not _G.__ZAP["ZAP"] then
	_G.__ZAP["ZAP"] = {}
elseif _G.__ZAP["ZAP"]["ZAP"] ~= nil then
	error(`There is already an instance of Zap with the same remote_scope of ZAP, remote_folder of ZAP and the version of {_G.__ZAP["ZAP"]["ZAP"]}. Change the remote_scope or remote_folder option of both Zap instances`)
end

_G.__ZAP["ZAP"]["ZAP"] = "0.6.26"

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		WaitForServer = table.freeze({
			Call = noop
		}),
		OnUnreliableUpdates = table.freeze({
			Iter = function()
				return noop
			end
		}),
		OnReliableUpdates = table.freeze({
			Iter = function()
				return noop
			end
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

local unreliable = { remotes:WaitForChild("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
export type Variants = ({ ({ ((unknown)) }) })

local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
local reliable_event_queue: { [number]: { any } } = table.create(2)
local unreliable_events = table.create(1)
local unreliable_event_queue: { [number]: { any } } = table.create(1)
local function_call_id = 0
unreliable_event_queue[0] = {}
reliable_event_queue[0] = {}
reliable_event_queue[1] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value, value2
			local bool_1 = buffer.readu8(incoming_buff, read(1))
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.create(len_1)
			buffer.copy(value, 0, incoming_buff, read(len_1), len_1)
			if bit32.btest(bool_1, 0b0000000000000001) then
				local len_2 = buffer.readu16(incoming_buff, read(2))
				value2 = table.create(len_2)
				for i_1 = 1, len_2 do
					local val_1
					local len_3 = buffer.readu16(incoming_buff, read(2))
					val_1 = table.create(len_3)
					for i_2 = 1, len_3 do
						local bool_2 = buffer.readu8(incoming_buff, read(1))
						local val_2
						if bit32.btest(bool_2, 0b0000000000000001) then
							incoming_ipos = incoming_ipos + 1
							val_2 = incoming_inst[incoming_ipos]
						else
							val_2 = nil
						end
						val_1[i_2] = val_2
					end
					value2[i_1] = val_1
				end
			else
				value2 = nil
			end
			local queue = polling_queues_reliable[0]
			-- `arguments` is a circular buffer.
			-- `queue.arguments` can be replaced when it needs to grow.
			-- It's indexed like `arguments[((index - 1) % queue_size) + 1] because Luau has 1-based indexing.
			local arguments = queue.arguments
			local queue_size = queue.queue_size
			local read_cursor = queue.read_cursor
			local write_cursor = queue.write_cursor
			local unwrapped_write_end_cursor = write_cursor + 2
			local write_end_cursor = ((unwrapped_write_end_cursor - 1) % queue_size) + 1
			if (write_cursor < read_cursor and write_end_cursor >= read_cursor) or (unwrapped_write_end_cursor > queue_size and write_end_cursor >= read_cursor) then
				local new_queue_size = queue_size * 2
				local new_arguments = table.create(new_queue_size)
				local new_write_cursor
				if write_cursor >= read_cursor then
					table.move(arguments, read_cursor, write_cursor, 1, new_arguments)
					new_write_cursor = write_cursor - read_cursor + 1
				else
					table.move(arguments, read_cursor, queue_size, 1, new_arguments)
					table.move(arguments, 1, write_cursor, (queue_size - read_cursor) + 1, new_arguments)
					new_write_cursor = write_cursor + (queue_size - read_cursor) + 1
				end
				queue.arguments = new_arguments
				queue.queue_size = new_queue_size
				queue.read_cursor = 1
				queue.write_cursor = new_write_cursor
				new_arguments[new_write_cursor] = value
				new_arguments[((new_write_cursor + 1 - 1) % new_queue_size) + 1] = value2
				queue.write_cursor = ((write_cursor + 1) % new_queue_size) + 1
			else
				arguments[write_cursor] = value
				arguments[((write_cursor + 1 - 1) % queue_size) + 1] = value2
				queue.write_cursor = ((write_cursor + 1) % queue_size) + 1
			end
		elseif id == 1 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value, value2
			local bool_3 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_3, 0b0000000000000001) then
				local len_4 = buffer.readu16(incoming_buff, read(2))
				value = buffer.create(len_4)
				buffer.copy(value, 0, incoming_buff, read(len_4), len_4)
			else
				value = nil
			end
			if bit32.btest(bool_3, 0b0000000000000010) then
				local len_5 = buffer.readu16(incoming_buff, read(2))
				value2 = table.create(len_5)
				for i_3 = 1, len_5 do
					local val_3
					local len_6 = buffer.readu16(incoming_buff, read(2))
					val_3 = table.create(len_6)
					for i_4 = 1, len_6 do
						local bool_4 = buffer.readu8(incoming_buff, read(1))
						local val_4
						if bit32.btest(bool_4, 0b0000000000000001) then
							incoming_ipos = incoming_ipos + 1
							val_4 = incoming_inst[incoming_ipos]
						else
							val_4 = nil
						end
						val_3[i_4] = val_4
					end
					value2[i_3] = val_3
				end
			else
				value2 = nil
			end
			local thread = reliable_event_queue[1][call_id]
			-- When using actors it's possible for multiple Zap clients to exist, but only one called the Zap remote function.
			if thread then
				task.spawn(thread, value, value2)
			end
			reliable_event_queue[1][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
unreliable[1].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local order_id = buffer.readu16(incoming_buff, read(2))
	if incoming_ids[0] and order_id <= incoming_ids[0] and incoming_ids[0] - order_id < 32767 then
		return
	end
	incoming_ids[0] = order_id
	local value, value2
	local bool_5 = buffer.readu8(incoming_buff, read(1))
	local len_7 = buffer.readu16(incoming_buff, read(2))
	value = buffer.create(len_7)
	buffer.copy(value, 0, incoming_buff, read(len_7), len_7)
	if bit32.btest(bool_5, 0b0000000000000001) then
		local len_8 = buffer.readu16(incoming_buff, read(2))
		value2 = table.create(len_8)
		for i_5 = 1, len_8 do
			local val_5
			local len_9 = buffer.readu16(incoming_buff, read(2))
			val_5 = table.create(len_9)
			for i_6 = 1, len_9 do
				local bool_6 = buffer.readu8(incoming_buff, read(1))
				local val_6
				if bit32.btest(bool_6, 0b0000000000000001) then
					incoming_ipos = incoming_ipos + 1
					val_6 = incoming_inst[incoming_ipos]
				else
					val_6 = nil
				end
				val_5[i_6] = val_6
			end
			value2[i_5] = val_5
		end
	else
		value2 = nil
	end
	local queue = polling_queues_unreliable[0]
	-- `arguments` is a circular buffer.
	-- `queue.arguments` can be replaced when it needs to grow.
	-- It's indexed like `arguments[((index - 1) % queue_size) + 1] because Luau has 1-based indexing.
	local arguments = queue.arguments
	local queue_size = queue.queue_size
	local read_cursor = queue.read_cursor
	local write_cursor = queue.write_cursor
	local unwrapped_write_end_cursor = write_cursor + 2
	local write_end_cursor = ((unwrapped_write_end_cursor - 1) % queue_size) + 1
	if (write_cursor < read_cursor and write_end_cursor >= read_cursor) or (unwrapped_write_end_cursor > queue_size and write_end_cursor >= read_cursor) then
		local new_queue_size = queue_size * 2
		local new_arguments = table.create(new_queue_size)
		local new_write_cursor
		if write_cursor >= read_cursor then
			table.move(arguments, read_cursor, write_cursor, 1, new_arguments)
			new_write_cursor = write_cursor - read_cursor + 1
		else
			table.move(arguments, read_cursor, queue_size, 1, new_arguments)
			table.move(arguments, 1, write_cursor, (queue_size - read_cursor) + 1, new_arguments)
			new_write_cursor = write_cursor + (queue_size - read_cursor) + 1
		end
		queue.arguments = new_arguments
		queue.queue_size = new_queue_size
		queue.read_cursor = 1
		queue.write_cursor = new_write_cursor
		new_arguments[new_write_cursor] = value
		new_arguments[((new_write_cursor + 1 - 1) % new_queue_size) + 1] = value2
		queue.write_cursor = ((write_cursor + 1) % new_queue_size) + 1
	else
		arguments[write_cursor] = value
		arguments[((write_cursor + 1 - 1) % queue_size) + 1] = value2
		queue.write_cursor = ((write_cursor + 1) % queue_size) + 1
	end
end)

polling_queues_unreliable[0] = {
	arguments = table.create(200),
	queue_size = 200,
	read_cursor = 1,
	write_cursor = 1,
	iterator = function()
		local queue = polling_queues_unreliable[0]
		local index = 0
		return function()
			index += 1
			if queue.read_cursor == queue.write_cursor then
				return nil
			end
			local arguments = queue.arguments
			local read_cursor = queue.read_cursor
			local queue_size = queue.queue_size
			local value_1_buf, value_2_variants = arguments[read_cursor], arguments[(read_cursor % queue_size) + 1]
			queue.read_cursor = ((queue.read_cursor + 1) % queue.queue_size) + 1
			return index, value_1_buf, value_2_variants
		end
	end,
}
polling_queues_reliable[0] = {
	arguments = table.create(200),
	queue_size = 200,
	read_cursor = 1,
	write_cursor = 1,
	iterator = function()
		local queue = polling_queues_reliable[0]
		local index = 0
		return function()
			index += 1
			if queue.read_cursor == queue.write_cursor then
				return nil
			end
			local arguments = queue.arguments
			local read_cursor = queue.read_cursor
			local queue_size = queue.queue_size
			local value_1_buf, value_2_variants = arguments[read_cursor], arguments[(read_cursor % queue_size) + 1]
			queue.read_cursor = ((queue.read_cursor + 1) % queue.queue_size) + 1
			return index, value_1_buf, value_2_variants
		end
	end,
}
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	WaitForServer = {
		Call = function(): (((buffer)?), (({ ({ ((unknown)) }) })?))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			function_call_id += 1
			function_call_id %= 256
			if reliable_event_queue[1][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			reliable_event_queue[1][function_call_id] = coroutine.running()
			return coroutine.yield()
		end,
	},
	OnUnreliableUpdates = {
		Iter = polling_queues_unreliable[0].iterator :: () -> (() -> (number, (buffer), (({ ({ ((unknown)) }) })?))),
	},
	OnReliableUpdates = {
		Iter = polling_queues_reliable[0].iterator :: () -> (() -> (number, (buffer), (({ ({ ((unknown)) }) })?))),
	},
}
type Events = typeof(returns)
return returns
